{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Reece's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Reece Corter</li> <li>Reviewer: Benjamin Corter</li> </ul> <p>Overview</p> <p>This tutorial will help you: - Create a blank directory and initialize a new Git repository into it - Set up a Dev Container with the official Rust image and 'rust-analyzer' - Write a basic program that will print Hello COMP423 - Understand the difference between 'cargo build' and 'cargo run' and their uses</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Visual Studio Code</li> <li>Docker Desktop</li> <li>Basic Git knowledge</li> </ul> <p>No Rust install on Host</p> <p>DO NOT install Rust locally. We will install &amp; run everything in a dev container.</p>"},{"location":"tutorials/rust-setup/#step-1-create-a-blank-directory-initialize-git-repo","title":"Step 1: Create a Blank Directory &amp; Initialize Git Repo","text":"<pre><code>mkdir rust-hello\ncd rust-hello\ngit init\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-dev-container-configuration","title":"Step 2: Dev Container Configuration","text":"<ol> <li>Create a folder named <code>.devcontainer</code> and navigate into it:</li> </ol> <pre><code>mkdir .devcontainer\ncd .devcontainer\n</code></pre> <ol> <li>Create a file named <code>devcontainer.json</code> with the following contents:</li> </ol> <pre><code>{\n    \"name\": \"Rust DevContainer\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:1\",\n    \"customizations\": {\n      \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\"rust-lang.rust-analyzer\"]\n      }\n    }\n  }\n</code></pre>"},{"location":"tutorials/rust-setup/#step-3-reopen-in-dev-container","title":"Step 3: Reopen in Dev Container","text":"<ol> <li>In Visual Studio Code, open the <code>rust-hello</code> folder.</li> <li>Press Ctrl + Shift + P &amp; select Dev Containers: Reopen in Container.</li> <li>Wait for the container to build.</li> </ol> <p>When completed, run:</p> <pre><code>rustc --version\n</code></pre> <p>You should see something like `rustc 1.x.x (yyyy-mm-dd)'. (1.84.0 as of 2025-01-09)</p>"},{"location":"tutorials/rust-setup/#step-4-create-a-new-rust-project","title":"Step 4: Create a New Rust Project","text":"<p>From inside the Dev Container terminal:</p> <pre><code>cd /workspaces/rust-hello\ncargo new --bin --vcs none hello-comp423\n</code></pre> <ul> <li>'--bin' creates a binary (executable) project.</li> <li>'--vcs none prevents Cargo from creating another Git repo inside 'hello-comp423'.</li> </ul>"},{"location":"tutorials/rust-setup/#step-5-write-hello-comp423-program","title":"Step 5: Write \"Hello COMP423\" Program","text":"<p>Open 'hello-comp423/src/main.rs'. Replace any existing code with:</p> <pre><code>fn main(){\n    println!(\"Hello COMP423\");\n}\n</code></pre>"},{"location":"tutorials/rust-setup/#step-6-build-run-program","title":"Step 6: Build &amp; Run Program","text":""},{"location":"tutorials/rust-setup/#option-a-build-run-manually","title":"Option A: Build &amp; Run Manually","text":"<pre><code>cd hello-comp423\ncargo build\n./target/debug/hello-comp423\n</code></pre> <p>This should output:</p> <pre><code>Hello COMP423\n</code></pre> <p>Relation to 'gcc' in COMP211</p> <p>'cargo build' is similar to using 'gcc hello-comp423.c -o hello-comp423': it compiles the program but does not run automatically.</p>"},{"location":"tutorials/rust-setup/#option-b-build-run-in-one-step","title":"Option B: Build &amp; Run in One Step","text":"<pre><code>cargo run\n</code></pre> <p>This command compiles (if needed) and executes the program. You will see:</p> <pre><code>Compiling hello-comp423 v0.1.0\nRunning 'target/debug/hello-comp423'\nHello COMP423\n</code></pre> <p>Difference from 'cargo build'</p> <ul> <li>'cargo build': only compiles your program.</li> <li>'cargo run':  compiles and immediately runs the compiled file in a single command.</li> </ul>"},{"location":"tutorials/rust-setup/#summary","title":"Summary","text":"<ul> <li>Step 1: Create a new folder, git init.</li> <li>Step 2: Add '.devcontainer/devcontainer.json' with the Rust base image + 'rust-analyzer'.</li> <li>Step 3: Reopen in container, verify 'rustc --version'.</li> <li>Step 4: Create project with cargo new --bin --vcs none hello-comp423.</li> <li>Step 5: Write \"Hello COMP423\" in main.rs.</li> <li>Step 6: Compile with cargo build and run the resulting file manually (Option A), or use cargo run (Option B) to do it all in one step.</li> </ul>"}]}